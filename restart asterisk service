#!/bin/bash
 
log_file="/var/log/prireset_log.txt"
report_log_file="/var/log/prireset_report_log.txt"
cron_log_file="/var/log/cron_check.log"
 
n=0
max_retries=10800
max_duration=7200  # 2 hours in seconds
max_call_duration=32400  # 9 hours in seconds
start_time=$(date +%s)
 
touch "$log_file" "$report_log_file" "$cron_log_file"
chmod 644 "$log_file" "$report_log_file" "$cron_log_file"
 
log_message() {
    message=$1
    timestamp=$(date +%Y%m%d-%H%M%S)
    echo "[$timestamp] $message" | tee -a "$cron_log_file"
}
 
cleanup_old_logs() {
    log_message "Cleaning up old logs in $cron_log_file..."
    awk -v d1=$(date --date="7 days ago" +%Y%m%d) '
        BEGIN {output=""}
        {
            match($0, /^\[([0-9]+)-/, matches)
            if (matches[1] >= d1) {output = output $0 ORS}
        }
        END {printf "%s", output}
    ' "$cron_log_file" > "${cron_log_file}.tmp" && mv "${cron_log_file}.tmp" "$cron_log_file"
}
 
is_asterisk_running() {
    [ -e /var/run/asterisk/asterisk.ctl ] && /usr/sbin/asterisk -rx "core show uptime" > /dev/null 2>&1
}
 
check_port_5038() {
    netstat -tuln | grep -q ":5038"
}
 
check_port_6379() {
    netstat -tuln | grep -q ":6379"
}
 
start_asterisk() {
    log_message "Stopping Asterisk service..."
    # Kill all active screen sessions
    pkill screen
    log_message "Killed all active screen sessions."
 
    /sbin/service asterisk stop >> "$cron_log_file" 2>&1
    sleep 10
 
    log_message "Stopping Redis service..."
    systemctl stop redis >> "$cron_log_file" 2>&1
    sleep 5
 
    log_message "Starting Redis service..."
    systemctl start redis >> "$cron_log_file" 2>&1
    sleep 5
 
    log_message "Checking if Redis is listening on port 6379..."
    if check_port_6379; then
        log_message "Redis is running and listening on port 6379."
    else
        log_message "Error: Redis is not listening on port 6379. Exiting script."
        cleanup_old_logs
        exit 1
    fi
 
    log_message "Starting screen sessions..."
    # Add screen start logic if necessary (custom screen commands)
 
    log_message "Starting Asterisk service..."
    /sbin/service asterisk start >> "$cron_log_file" 2>&1
    sleep 10
 
    if is_asterisk_running; then
        if check_port_5038; then
            log_message "Port 5038 is listening. Asterisk started successfully."
            DATE=$(date +%Y%m%d-%H%M%S)
            echo "${DATE} task completed" > "$log_file"
            cat "$log_file" >> "$report_log_file"
            cleanup_old_logs
            exit 0
        else
            log_message "Asterisk is running, but port 5038 is not listening. Exiting script."
            cleanup_old_logs
            exit 1
        fi
    else
        log_message "Failed to start Asterisk. Check the logs for details."
        cleanup_old_logs
        exit 1
    fi
}
 
get_call_durations() {
    /usr/sbin/asterisk -rx "core show channels verbose" |
        awk '/Up/ && !/CBAnn/ && !/CBRec/ {print $0}' |  # Filter only valid call entries
        awk '{print $(NF-1)}' |                          # Extract duration (e.g., "07:18:12")
        awk -F: '{print ($1 * 3600) + ($2 * 60) + $3}'   # Convert to seconds
}
 
while [ $n -lt $max_retries ]; do
    if is_asterisk_running; then
        active_channels=$(/usr/sbin/asterisk -rx "core show channels verbose" | grep -c Up)
        log_message "Number of active channels: $active_channels"
 
        if [[ "$active_channels" -eq 0 ]]; then
            log_message "No active channels. Restarting Asterisk service..."
            start_asterisk
        else
            all_calls_exceed_2hrs=true
            call_durations=$(get_call_durations)
 
            for duration in $call_durations; do
                if [ "$duration" -lt "$max_call_duration" ]; then
                    all_calls_exceed_2hrs=false
                    log_message "Call duration ($duration seconds) is under 2 hours. Skipping restart."
                    break
                fi
            done
 
            if $all_calls_exceed_2hrs; then
                log_message "All calls exceed 2 hours. Restarting Asterisk."
                start_asterisk
            else
                log_message "Retrying in 2 seconds."
            fi
        fi
    else
        log_message "Asterisk is not running. Attempting to start..."
        start_asterisk
    fi
n=$((n + 1))
    current_time=$(date +%s)
    elapsed_time=$((current_time - start_time))
 
    if [ "$elapsed_time" -ge "$max_duration" ]; then
        log_message "Exceeded maximum duration of $max_duration seconds. Exiting script."
        cleanup_old_logs
        exit 1
    fi
 
    sleep 2
done
 
log_message "Exceeded maximum retries of $max_retries. Exiting script."
cleanup_old_logs
exit 1
